// Luodaan muuttujat

const s√§√§Lomake = document.querySelector(".s√§√§Lomake");
const sy√∂t√§Kaupunki = document.querySelector(".sy√∂t√§Kaupunki");
const kortti = document.querySelector(".kortti");
const apiKey = "2aed28d65691307452819aea8410a262";

s√§√§Lomake.addEventListener("submit", async event => {

//Asetetaan lomake nollautumaan sivun p√§ivityksess√§
    event.preventDefault();

//Haetaan input kentt√§√§n kirjoitettu paikkakunta ja asetetaan varoitusteksti 
//jos paikkakuntaa ei ole kirjoitettu
    const kaupunki = sy√∂t√§Kaupunki.value;
    if (kaupunki) {
        try {
            const s√§√§Data = await haeS√§√§Data(kaupunki);
            n√§yt√§S√§√§(s√§√§Data);

        }
        catch(error) {
            console.error(error);
            n√§yt√§Virhe(error);

        }

    }
    else {
        n√§yt√§Virhe("Sy√∂t√§ paikkakunta");
    }
});

// M√§√§ritet√§√§n funktio hakemaan s√§√§tiedot openweathermapin apista.
async function haeS√§√§Data(kaupunki) {
    const apiUrl = `http://api.openweathermap.org/data/2.5/weather?q=${kaupunki}&lang=fi&appid=${apiKey}`;
    const response = await fetch(apiUrl);

// Varaudutaan mahdollisuuteen ett√§ kirjoitettua paikkakuntaa ei l√∂ydy tietokannasta.
    if(!response.ok){
        throw new Error("Paikkakuntaa ei l√∂ydy.") ;
    }
// Palautetaan saadut s√§√§tidot json muodossa
    return await response.json();


}

// Tehd√§√§n funktio s√§√§tietojen n√§ytt√§miseen
function n√§yt√§S√§√§(data) {
    const { //Valitaan muuttujat jotka halutaan n√§ytt√§√§
            name: kaupunki,
            main: {temp, humidity, feels_like},
            weather:[{description, id}],
            wind: {speed} } = data;

    kortti.textContent = "";
    kortti.style.display = "flex";

// Luodaan HTML-elementit
    const n√§yt√§Kaupunki = document.createElement("h1");
    const n√§yt√§L√§mp√∂ = document.createElement("p");
    const tuntuuKuin = document.createElement("p");
    const n√§yt√§Tuuli = document.createElement("p");
    const n√§yt√§Kosteus = document.createElement("p");
    const n√§yt√§Kuvaus = document.createElement("p");
    const n√§yt√§Emoji = document.createElement("p");
    
//M√§√§ritell√§√§n elementtien sis√§lt√∂
    n√§yt√§Kaupunki.textContent = kaupunki;
    n√§yt√§L√§mp√∂.textContent = `${(temp - 273.15).toFixed(1)}¬∞C`;
    if (temp - 273.15 < 0) {
        n√§yt√§L√§mp√∂.classList.add("pakkanen"); }
        else {
            n√§yt√§L√§mp√∂.classList.add("plussa");
        }
    tuntuuKuin.textContent = `Tuntuu kuin: ${(feels_like - 273.15).toFixed(1)}¬∞C`
    n√§yt√§Tuuli.textContent = `Tuuli: ${speed.toFixed(0)} m/s`
    n√§yt√§Kosteus.textContent = `Kosteus: ${humidity}%`;
    n√§yt√§Kuvaus.textContent = description;
    n√§yt√§Emoji.textContent = haeS√§√§Emoji(id);

// Lis√§t√§√§n luodut elementit s√§√§korttiin ja yhdistet√§√§n muotoilut CSS-tiedostosta.
    n√§yt√§Kaupunki.classList.add("n√§yt√§Kaupunki");
    n√§yt√§L√§mp√∂.classList.add("n√§yt√§L√§mp√∂");
    tuntuuKuin.classList.add("tuntuuKuin");
    n√§yt√§Tuuli.classList.add("n√§yt√§Tuuli");
    n√§yt√§Kosteus.classList.add("n√§yt√§Kosteus");
    n√§yt√§Kuvaus.classList.add("n√§yt√§Kuvaus");
    n√§yt√§Emoji.classList.add("n√§yt√§Emoji");

    kortti.appendChild(n√§yt√§Kaupunki);
    kortti.appendChild(n√§yt√§L√§mp√∂);
    kortti.appendChild(tuntuuKuin);
    kortti.appendChild(n√§yt√§Tuuli);
    kortti.appendChild(n√§yt√§Kosteus);
    kortti.appendChild(n√§yt√§Kuvaus);
    kortti.appendChild(n√§yt√§Emoji);
        
    
}
// Luodaan ja m√§√§ritell√§√§n palautuva s√§√§emoji s√§√§IDn mukaisesti.
function haeS√§√§Emoji (s√§√§Id) {

    switch(true){
        case (s√§√§Id >= 200 && s√§√§Id < 300 ):
            return "‚õàÔ∏è";
        case (s√§√§Id >= 300 && s√§√§Id < 400 ):
            return "üåßÔ∏è";
        case (s√§√§Id >= 500 && s√§√§Id < 600 ):
            return "üåßÔ∏è";
        case (s√§√§Id >= 600 && s√§√§Id < 700 ):
            return "üå®Ô∏è";
        case (s√§√§Id >= 700 && s√§√§Id < 800 ):
            return "üå´Ô∏è";
        case (s√§√§Id === 800):
            return "‚òÄÔ∏è";
        case (s√§√§Id >= 801 && s√§√§Id < 810 ):
            return "‚òÅÔ∏è";
        default:
            return "‚ùì" ;
    }

}

// Luodaan oma funktio virheilmoitukselle joka tulee jos paikkakuntaa ei sy√∂tet√§
function n√§yt√§Virhe(viesti) {

    const virheN√§ytt√∂ = document.createElement("p") ;
    virheN√§ytt√∂.textContent = viesti;
    virheN√§ytt√∂.classList.add("virheN√§ytt√∂");

    kortti.textContent = "" ;
    kortti.style.display = "flex";
    kortti.appendChild(virheN√§ytt√∂);

}